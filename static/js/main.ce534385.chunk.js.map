{"version":3,"sources":["ToDo/ToDoList.tsx","ToDo/ToDoComponent.tsx","ToDo/ToDoStore.ts","ToDo/ToDoSummary.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoList","observer","this","props","ToDos","length","className","Row","map","todo","key","ID","Title","IsCompleted","width","height","viewBox","fill","xmlns","fill-rule","d","color","React","ToDoComponent","inject","state","todoError","addToDo","bind","onTitleChange","onIsCompleteChange","event","preventDefault","ToDoStore","setState","target","value","checked","todos","getToDos","message","role","style","marginBottom","onSubmit","htmlFor","placeholder","onChange","name","id","minWidth","required","marginTop","marginLeft","verticalAlign","type","configure","enforceActions","action","bound","todoAPI","fetch","response","json","newToDos","addToDoToStore","push","title","isCompleted","method","headers","body","JSON","stringify","createdToDo","addNewToDoToStore","observable","ToDoSummary","totalToDos","completedToDos","filter","x","fontSize","App","todoStore","init","Container","fluid","Col","md","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ce534385.chunk.js","sourcesContent":["import { observer } from 'mobx-react';\nimport * as React from 'react';\nimport { Row } from 'reactstrap';\nimport ToDoModel from './ToDoModel';\n\n@observer\nexport default class ToDoList extends React.Component<\n  { ToDos: ToDoModel[] },\n  {}\n> {\n  render() {\n    if (this.props.ToDos.length === 0) {\n      return <div>Please add wishlist to get started</div>;\n    }\n\n    return (\n      <div>\n        <h4>My wishlists</h4>\n\n        <div className=\"todoList\">\n          <Row className=\"p-2\">\n            <div className=\"col-md-8\">Name</div>\n            <div className=\"col-md-2\">IsCompleted</div>\n          </Row>\n\n          {this.props.ToDos.map((todo) => {\n            return (\n              <Row key={todo.ID} className=\"p-1\">\n                <div className=\"todoItem col-md-8\">{todo.Title}</div>\n                <div className=\"col-md-2 todoItem\">\n                  {todo.IsCompleted ? (\n                    <svg\n                      width=\"1.4em\"\n                      height=\"1.2em\"\n                      viewBox=\"0 0 16 16\"\n                      className=\"bi bi-check-circle-fill\"\n                      fill=\"green\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        fill-rule=\"evenodd\"\n                        d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"\n                      />\n                    </svg>\n                  ) : (\n                    <svg\n                      width=\"1.4em\"\n                      height=\"1.2em\"\n                      viewBox=\"0 0 16 16\"\n                      className=\"bi bi-x-circle-fill\"\n                      fill=\"#fc2222\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        fill-rule=\"evenodd\"\n                        color=\"white\"\n                        d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"\n                      />\n                    </svg>\n                  )}\n                </div>\n              </Row>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import { inject, observer } from 'mobx-react';\nimport * as React from 'react';\nimport { Row } from 'reactstrap';\nimport ToDoList from './ToDoList';\nimport ToDoStore from './ToDoStore';\n\n@inject('ToDoStore')\n@observer\nexport default class ToDoComponent extends React.Component<\n  { ToDoStore?: ToDoStore },\n  { Title: string; IsCompleted: boolean; todoError: Error | null }\n> {\n  constructor(props) {\n    super(props);\n    this.state = { Title: '', IsCompleted: false, todoError: null };\n\n    this.addToDo = this.addToDo.bind(this);\n    this.onTitleChange = this.onTitleChange.bind(this);\n    this.onIsCompleteChange = this.onIsCompleteChange.bind(this);\n  }\n\n  async addToDo(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    await this.props.ToDoStore?.addToDo(\n      this.state.Title,\n      this.state.IsCompleted\n    );\n\n    this.setState({ Title: '', IsCompleted: false });\n  }\n\n  onTitleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ Title: event.target.value });\n  }\n\n  onIsCompleteChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ IsCompleted: event.target.checked });\n  }\n\n  render() {\n    let todos = this.props.ToDoStore?.getToDos() || [];\n    // console.log(toJS(todos));\n\n    return (\n      <div className=\"todoContainer\">\n        {this.state.todoError?.message ? (\n          <div>\n            <div className=\"alert alert-danger\" role=\"alert\">\n              Some error occurred. Please try again\n            </div>\n          </div>\n        ) : null}\n\n        <h4 style={{ marginBottom: '30px' }}>Create New Wishlist</h4>\n\n        <form onSubmit={this.addToDo}>\n          <div>\n            <Row>\n              <div className=\"form-group col-md-8\">\n                <label className=\"form-label\" htmlFor=\"Title\">\n                  Wish\n                </label>\n                <input\n                  placeholder=\"Enter your Wish\"\n                  className=\"form-control\"\n                  onChange={this.onTitleChange}\n                  name=\"Title\"\n                  id=\"Title\"\n                  style={{ minWidth: '150px' }}\n                  value={this.state.Title}\n                  required\n                />\n              </div>\n\n              <div\n                className=\"col-md-2 form-check\"\n                style={{\n                  marginTop: '40px',\n                  marginLeft: '20px',\n                  verticalAlign: 'center',\n                }}\n              >\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  id=\"IsCompleted\"\n                  name=\"IsCompleted\"\n                  onChange={this.onIsCompleteChange}\n                  checked={this.state.IsCompleted}\n                />\n\n                <label htmlFor=\"IsCompleted\" className=\"form-check-label\">\n                  Completed?\n                </label>\n              </div>\n\n              <div\n                className=\"col-md-2 mt-30 ml-20\"\n                style={{\n                  marginTop: '30px',\n                  verticalAlign: 'center',\n                }}\n              >\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Add\n                </button>\n              </div>\n            </Row>\n          </div>\n        </form>\n\n        <hr />\n\n        <div className=\"mt-20\">\n          <ToDoList ToDos={todos} />\n        </div>\n      </div>\n    );\n  }\n}\n","import { action, configure, observable } from 'mobx';\nimport ToDoModel from './ToDoModel';\n\nconfigure({ enforceActions: 'always' });\n\nexport default class ToDoStore {\n  @observable\n  ToDos: ToDoModel[] = [];\n\n  private todoAPI = 'https://localhost:44308/api/ToDo';\n\n  @action.bound\n  async init() {\n    let response = await fetch(this.todoAPI);\n    let newToDos: ToDoModel[] = await response.json();\n    this.addToDoToStore(newToDos);\n  }\n\n  @action.bound\n  addToDoToStore(ToDos: ToDoModel[]) {\n    this.ToDos.length = 0;\n    for (let todo of ToDos) {\n      this.ToDos.push(todo);\n    }\n  }\n\n  @action.bound\n  getToDos() {\n    return this.ToDos;\n  }\n\n  @action.bound\n  async addToDo(title, isCompleted) {\n    let response = await fetch(this.todoAPI, {\n      method: 'Post',\n      headers: { 'content-type': 'application/json' },\n      body: JSON.stringify({ title, isCompleted }),\n    });\n    let createdToDo = await response.json();\n    this.addNewToDoToStore(createdToDo);\n  }\n\n  @action.bound\n  async addNewToDoToStore(todo: ToDoModel) {\n    this.ToDos.push(todo);\n  }\n}\n","import { inject, observer } from 'mobx-react';\nimport * as React from 'react';\nimport ToDoStore from './ToDoStore';\n\n@inject('ToDoStore')\n@observer\nexport default class ToDoSummary extends React.Component<\n  { ToDoStore?: ToDoStore },\n  {}\n> {\n  render() {\n    const totalToDos = this.props.ToDoStore?.ToDos.length ?? 0;\n    const completedToDos =\n      this.props.ToDoStore?.ToDos.filter((x) => x.IsCompleted).length ?? 0;\n\n    return (\n      <section style={{ fontSize: 'larger' }}>\n        ToDo status {totalToDos - completedToDos} ToDo(s) pending from{' '}\n        {totalToDos} ToDo(s)\n      </section>\n    );\n  }\n}\n","import { Provider } from 'mobx-react';\nimport * as React from 'react';\nimport { Col, Container, Row } from 'reactstrap';\nimport './App.css';\nimport ToDoComponent from './ToDo/ToDoComponent';\nimport ToDoStore from './ToDo/ToDoStore';\nimport ToDoSummary from './ToDo/ToDoSummary';\n\nexport default class App extends React.Component<{}, {}> {\n  private todoStore: ToDoStore;\n\n  constructor(props) {\n    super(props);\n    this.todoStore = new ToDoStore();\n  }\n\n  componentDidMount() {\n    this.todoStore.init();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>ToDo App using React and Mobx</h3>\n\n        <Provider ToDoStore={this.todoStore}>\n          <Container fluid={true}>\n            <Row>\n              <Col md={{ size: 9 }}>\n                <ToDoComponent />\n              </Col>\n              <Col md={{ size: 3 }}>\n                <ToDoSummary />\n              </Col>\n            </Row>\n          </Container>\n        </Provider>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}